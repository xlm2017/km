

// 与门
// 同1则1

let a = 1;
let b = 2;

// 同1则1
console.log("1 & 2:", a & b);
// 01 
// 10  
// 00 ==> 0

console.log("2 & 3:", 2 & 3);
// 010
//  11
// 10  ==> 2

// 位运算, 先将数值转为二进制数, 再进行计算



// &	and（并且）	同1则1



// 一个整数 n，n&1 这个表达式 可以用来 判断 a 的奇偶性。
// 二进制的末位为 0表示偶数，末位为 1表是奇数。
// 使用n%2 来判断奇偶性 和n&1是一样的作用。

// n%2和n&1效果一样，速度也一样，不可能快很多，因为任何数对2的指数的取模运算，编译器一般会将其优化为位运算，对于非2的取模运算，位运算确实更快

// 按位与：& 将参与运算的两操作数各对应的二进制位进行与操作， 只有对应的两个二进位均为1时，结果的对应二进制位才为1，否则为0

// 记住：在做位运算时，位数不够的数，自动在 前面补 0 。比如：

// 21 & 1 ：10101 & 00001 = 00001 = 1
// 16 & 1 ：10000 & 00001 = 00000 = 0

// 事实证明：偶数的二进制的末尾 为0，奇数的二进制的末尾 为1

// 十进制m 转换 n进制方法： m 一直除 n，每相除一次，m就等于商，直到商为0，然后余数反排 即可。

// 15的二进制：15/2=7 余1
// 7/2=3 余1
// 3/2=1 余1
// 1/2=0 余1
// 余数反排 即是 15的二进制：1111

// 参考阅读：
// 位运算之判断奇偶性&1： https://blog.csdn.net/acceptee/article/details/60139830
// java程序性能优化：https://www.cnblogs.com/chinafine/articles/1787118.html
// java简单的判断奇偶数方法(i & 1) != 0 i为奇数：https://blog.51cto.com/qq445493481/1658144

// 基本的逻辑运算包括与 或 非 三种。其运算真值可记忆为：
// 与，相当于乘，全一得一。
// 或，相当于加，有一得一。
// 非，取反，0与1互换。



