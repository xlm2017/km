

// 输入：nums1 = [4,1,2], nums2 = [1,3,4,2].
// 输出：[-1,3,-1]
// 解释：nums1 中每个值的下一个更大元素如下所述：
// - 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。
// - 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。
// - 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。


/**
* @param {number[]} nums1
* @param {number[]} nums2
* @return {number[]}
*/
var nextGreaterElement = function (nums1, nums2) {
  let res = []
  let stack = [0]
  let hash = {}
  for (let i = 1; i < nums2.length; i++) {
    if (nums2[stack[stack.length - 1]] < nums2[i]) {
      // console.log("栈顶元素 小于 当前元素, 入栈")

      for (let x = stack[stack.length - 1]; x < i; x++) {
        if (!hash[nums2[x]]) {
          hash[nums2[x]] = nums2[i]
        }
      }

      stack = [];
      // 出栈, 下个进栈
      stack.push(i);

      // [137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,109,
      // [137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,
      // [236,92,122,131,131,236,236,248,171,199,169,169,199,248,250,196,198,198,198,198,198,215,230,250,189,189,206,216,216,216,216,250,250,183,250,250,253,109,140,147,207,

    } else {
      // console.log("栈顶元素 大于 当前元素, 出栈")
      stack.push(i);
    }
    // console.log("哈希值记录:", hash)
    // console.log("当前栈:", stack, nums2)
    // console.log("\n")
  }
  // console.log("hash:", hash);

  for (let j = 0; j < nums1.length; j++) {
    res.push(hash[nums1[j]] || - 1)
  }
  return res;
};

// [7,-1,-1,-1,-1]

// [1,3,5,2,4]
// [6,5,4,3,2,1,7]
// [7,7,7,7,7]

let nums1 = [4, 1, 2];
let nums2 = [1, 3, 4, 2];
// [-1,3,-1]


// nums1 = [1, 3, 5, 2, 4];
// nums2 = [6, 5, 4, 3, 2, 1, 7];
// [7,-1,-1,-1,-1]  // 错误
// [7,7,7,7,7]      



nums1 = [137, 59, 92, 122, 52, 131, 79, 236, 94, 171, 141, 86, 169, 199, 248, 120, 196, 168, 77, 71, 5, 198, 215, 230, 176, 87, 189, 206, 115, 76, 13, 216, 197, 26, 183, 54, 250, 27, 109, 140, 147, 25, 96, 105, 30, 207, 241, 8, 217, 40, 0, 35, 221, 191, 83, 132, 9, 144, 12, 91, 175, 65, 170, 149, 174, 82, 102, 167, 62, 70, 44, 143, 10, 153, 160, 142, 188, 81, 146, 212, 15, 162, 103, 163, 123, 48, 245, 116, 192, 14, 211, 126, 63, 180, 88, 155, 224, 148, 134, 158, 119, 165, 130, 112, 166, 93, 125, 1, 11, 208, 150, 100, 106, 194, 124, 2, 184, 75, 113, 104, 18, 210, 202, 111, 84, 223, 173, 238, 41, 33, 154, 47, 244, 232, 249, 60, 164, 227, 253, 56, 157, 99, 179, 6, 203, 110, 127, 152, 252, 55, 185, 73, 67, 219, 22, 156, 118, 234, 37, 193, 90, 187, 181, 23, 220, 72, 255, 58, 204, 7, 107, 239, 42, 139, 159, 95, 45, 242, 145, 172, 209, 121, 24, 21, 218, 246, 49, 46, 243, 178, 64, 161, 117, 20, 214, 17, 114, 69, 182, 85, 229, 32, 129, 29, 226, 136, 39, 36, 233, 43, 240, 254, 57, 251, 78, 51, 195, 98, 205, 108, 61, 66, 16, 213, 19, 68, 237, 190, 3, 200, 133, 80, 177, 97, 74, 138, 38, 235, 135, 186, 89, 201, 4, 101, 151, 31, 228, 231, 34, 225, 28, 222, 128, 53, 50, 247]
nums2 = [137, 59, 92, 122, 52, 131, 79, 236, 94, 171, 141, 86, 169, 199, 248, 120, 196, 168, 77, 71, 5, 198, 215, 230, 176, 87, 189, 206, 115, 76, 13, 216, 197, 26, 183, 54, 250, 27, 109, 140, 147, 25, 96, 105, 30, 207, 241, 8, 217, 40, 0, 35, 221, 191, 83, 132, 9, 144, 12, 91, 175, 65, 170, 149, 174, 82, 102, 167, 62, 70, 44, 143, 10, 153, 160, 142, 188, 81, 146, 212, 15, 162, 103, 163, 123, 48, 245, 116, 192, 14, 211, 126, 63, 180, 88, 155, 224, 148, 134, 158, 119, 165, 130, 112, 166, 93, 125, 1, 11, 208, 150, 100, 106, 194, 124, 2, 184, 75, 113, 104, 18, 210, 202, 111, 84, 223, 173, 238, 41, 33, 154, 47, 244, 232, 249, 60, 164, 227, 253, 56, 157, 99, 179, 6, 203, 110, 127, 152, 252, 55, 185, 73, 67, 219, 22, 156, 118, 234, 37, 193, 90, 187, 181, 23, 220, 72, 255, 58, 204, 7, 107, 239, 42, 139, 159, 95, 45, 242, 145, 172, 209, 121, 24, 21, 218, 246, 49, 46, 243, 178, 64, 161, 117, 20, 214, 17, 114, 69, 182, 85, 229, 32, 129, 29, 226, 136, 39, 36, 233, 43, 240, 254, 57, 251, 78, 51, 195, 98, 205, 108, 61, 66, 16, 213, 19, 68, 237, 190, 3, 200, 133, 80, 177, 97, 74, 138, 38, 235, 135, 186, 89, 201, 4, 101, 151, 31, 228, 231, 34, 225, 28, 222, 128, 53, 50, 247]

// 预期
// [236,92,122,131,131,236,236,248,171,199,169,169,199,248,250,196,198,198,198,198,198,215,230,250,189,189,206,216,216,216,216,250,250,183,250,250,253,109,140,147,207,96,105,207,207,241,245,217,221,221,35,221,245,212,132,144,144,175,91,175,188,170,174,174,188,102,167,188,70,143,143,153,153,160,188,188,212,146,212,245,162,163,163,245,245,245,249,192,211,211,224,180,180,224,155,224,238,158,158,165,165,166,166,166,208,125,208,11,208,210,194,106,194,210,184,184,210,113,210,210,210,223,223,223,223,238,238,244,154,154,244,244,249,249,253,164,227,253,255,157,179,179,203,203,252,127,152,252,255,185,219,219,219,234,156,234,234,255,193,220,187,220,220,220,255,255,-1,204,239,107,239,242,139,159,242,242,242,246,172,209,218,218,218,218,246,254,243,243,254,214,161,214,214,214,229,114,182,182,229,229,233,129,226,226,233,233,233,233,240,240,254,-1,251,-1,195,195,205,205,213,213,66,213,213,237,68,237,247,200,200,235,177,177,235,138,138,235,235,247,186,201,201,228,101,151,228,228,231,247,225,247,222,247,247,247,247,-1]

// 错误
// [236,236,236,236,236,236,236,248,248,248,248,248,248,248,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]

console.log(nextGreaterElement(nums1, nums2));


// 方法二：单调栈 + 哈希表
// 思路

// 我们可以先预处理 nums2\textit{nums}_2nums 
// 2
// ​
//  ，使查询 nums1\textit{nums}_1nums 
// 1
// ​
//   中的每个元素在 nums2\textit{nums}_2nums 
// 2
// ​
//   中对应位置的右边的第一个更大的元素值时不需要再遍历 nums2\textit{nums}_2nums 
// 2
// ​
//  。于是，我们将题目分解为两个子问题：

// 第 111 个子问题：如何更高效地计算 nums2\textit{nums}_2nums 
// 2
// ​
//   中每个元素右边的第一个更大的值；

// 第 222 个子问题：如何存储第 111 个子问题的结果。

// 算法

// 我们可以使用单调栈来解决第 111 个子问题。倒序遍历 nums2\textit{nums}_2nums 
// 2
// ​
//  ，并用单调栈中维护当前位置右边的更大的元素列表，从栈底到栈顶的元素是单调递减的。

// 具体地，每次我们移动到数组中一个新的位置 iii，就将当前单调栈中所有小于 nums2[i]\textit{nums}_2[i]nums 
// 2
// ​
//  [i] 的元素弹出单调栈，当前位置右边的第一个更大的元素即为栈顶元素，如果栈为空则说明当前位置右边没有更大的元素。随后我们将位置 iii 的元素入栈。

// 可以结合以下例子来理解。

// 作者：力扣官方题解
// 链接：https://leetcode.cn/problems/next-greater-element-i/solutions/1065517/xia-yi-ge-geng-da-yuan-su-i-by-leetcode-bfcoj/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。